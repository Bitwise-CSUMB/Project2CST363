package com.csumb.cst363;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;

import com.csumb.cst363.InputVerifier.InputVerificationException;

@Controller
public class ControllerPrescriptionCreate {

	@Autowired
	private JdbcTemplate jdbcTemplate;

	/*
	 * Doctor requests blank form for new prescription.
	 */
	@GetMapping("/prescription/new")
	public String newPrescripton(Model model) {
		model.addAttribute("prescription", new Prescription());
		return "prescription_create";
	}

	/*
	 * Process the new prescription form.
	 * 1.  Validate that Doctor SSN exists and matches Doctor Name.
	 * 2.  Validate that Patient SSN exists and matches Patient Name.
	 * 3.  Validate that Drug name exists.
	 * 4.  Insert new prescription.
	 * 5.  If error, return error message and the prescription form
	 * 6.  Otherwise, return the prescription with the rxid number that was generated by the database.
	 */
	@PostMapping("/prescription")
	public String newPrescription( Prescription p, Model model) {

		try (Connection con = getConnection()) {

			PreparedStatement ps;
			ResultSet rs;

			String doctorSSN = InputVerifier.verifySSNField(p.getDoctorSSN(),"Doctor SSN", model);
			String doctorFirstName = InputVerifier.verifyWordField(p.getDoctorFirstName(), 45, "Doctor First Name", model);
			String doctorLastName = InputVerifier.verifyWordField(p.getDoctorLastName(), 45, "Doctor Last Name", model);
			String patientSSN = InputVerifier.verifySSNField(p.getPatientSSN(), "Patient SSN", model);
			String patientFirstName = InputVerifier.verifyWordField(p.getPatientFirstName(), 45, "Patient First Name", model);
			String patientLastName = InputVerifier.verifyWordField(p.getPatientLastName(), 45, "Patient Last Name", model);
			String drugName = InputVerifier.verifyWordField(p.getDrugName(), 45, "Drug Name", model);
			int drugQuantity = InputVerifier.verifyQuantity(p.getQuantity(), "Quantity", model);

			// 1.  Validate that Doctor SSN exists and matches Doctor Name.
			int doctorId;

			ps = con.prepareStatement("select doctorSSN, doctorFirstName, doctorLastName, doctorId from doctor where doctorSSN = ?");
			ps.setString(1, doctorSSN);
			ps.executeQuery();

			rs = ps.getResultSet();
			if (rs.next()) {

				if (rs.getString("doctorFirstName").equals(doctorFirstName)
					&& rs.getString("doctorLastName").equals(doctorLastName))
				{
					doctorId = rs.getInt("doctorId");
				}
				else {
					model.addAttribute("message", "Error: Doctor F/L names do not match SSN provided.");
					throw new InputVerificationException();
				}
			}
			else {
				model.addAttribute("message", "Error: Doctor SSN not found.");
				throw new InputVerificationException();
			}

			// 2.  Validate that Patient SSN exists and matches Patient Name.
			int patientId;

			ps = con.prepareStatement("select patientSSN, patientFirstName, patientLastName, patientId from patient where patientSSN = ?");
			ps.setString(1, patientSSN);
			ps.executeQuery();

			rs = ps.getResultSet();
			if (rs.next()) {
				if (rs.getString("patientFirstName").equals(patientFirstName)
					&& rs.getString("patientLastName").equals(patientLastName))
				{
					patientId = rs.getInt("patientId");
				}
				else {
					model.addAttribute("message", "Error: Patient F/L names do not match SSN provided.");
					throw new InputVerificationException();
				}
			}
			else {
				model.addAttribute("message", "Error: Patient SSN not found.");
				throw new InputVerificationException();
			}

			// 3.  Validate that Drug name exists.
			// MUST have generic, may have trade name, if trade name exists make note of that
			int drugId;

			ps = con.prepareStatement("select tradeName, drugId from drug where tradeName = ?");
			ps.setString(1, drugName);
			ps.executeQuery();

			rs = ps.getResultSet();
			if (!rs.next()) {

				ps = con.prepareStatement("select genericName, drugId from drug where genericName = ?");
				ps.setString(1, drugName);
				ps.executeQuery();

				rs = ps.getResultSet();
				if (!rs.next()) {
					model.addAttribute("message", "Error: Drug name not found.");
					throw new InputVerificationException();
				}
				else {
					drugId = rs.getInt("drugId");
				}
			}
			else {
				drugId = rs.getInt("drugId");
			}

			// 4.  Insert new prescription.
			// Get the current time
			java.util.Date utilDate = new java.util.Date();
			java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());

			ps = con.prepareStatement("insert into prescription(doctorId, patientId, drugId, prescribeDate, quantity) values(?, ?, ?, ?, ?)",
				Statement.RETURN_GENERATED_KEYS);

			ps.setInt(1, doctorId);
			ps.setInt(2, patientId);
			ps.setInt(3, drugId);
			ps.setDate(4, sqlDate);
			ps.setInt(5, drugQuantity);
			ps.executeUpdate();

			rs = ps.getGeneratedKeys();
			if (rs.next()) {
				p.setRxNum(String.valueOf(rs.getInt(1)));
			}

			// 5.  If error, return error message and the prescription form
			// 6.  Otherwise, return the prescription with the rxid number that was generated by the database.

			model.addAttribute("message", "Prescription created.");
			model.addAttribute("prescription", p);
			return "prescription_show";
		}
		catch (SQLException e) {
			model.addAttribute("message", "SQL Error." + e.getMessage());
			model.addAttribute("prescription", p);
			return "prescription_create";
		}
		catch (InputVerificationException ignored) {
			return "prescription_create";
		}
	}

	/*
	 * return JDBC Connection using jdbcTemplate in Spring Server
	 */

	private Connection getConnection() throws SQLException {
		Connection conn = jdbcTemplate.getDataSource().getConnection();
		return conn;
	}
}
